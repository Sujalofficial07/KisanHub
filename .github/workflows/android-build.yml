name: Android CI Build

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up JDK 17, which is required for modern Android development
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # Step 3: Setup Gradle caching to speed up future builds
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      # Step 4: Grant execute permission for the Gradle wrapper
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # Step 5: Run the `build` task to check for compilation errors and run unit tests
      - name: Build with Gradle
        run: ./gradlew build

      # Step 6: Run the `assembleDebug` task to create the debug APK
      - name: Assemble Debug APK
        run: ./gradlew assembleDebug

      # Step 7: Upload the generated APK as a build artifact
      # THIS IS THE CORRECTED STEP
      - name: Upload APK Artifact
        uses: actions/upload-artifact@v4
        with:
          # Name of the artifact to be uploaded
          name: KisanHub-Debug-APK
          # Path to the file(s) to upload
          path: app/build/outputs/apk/debug/app-debug.apk
          # How long to retain the artifact (in days)
          retention-days: 7

```
